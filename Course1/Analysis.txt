#Task0------------------------
PROVIDED CODE complexity (reading from two files):
    Let's N be the number of records in calls file.
    Let's M be the number of records in texts file.
    To read N records from file and create the list of call will take O(N)
    To read M records from file and create the list of texts will take O(M)
    We do this operations one by one so the total complexity is
O(N+M)

SOLUTION complexity:
    To print the result message takes
O(1) time.

TOTAL complexity = PROVIDED CODE complexity + SOLUTION complexity
TOTAL = O(N+M) + O(1) => O(N+M)

#Task1------------------------
PROVIDED CODE complexity (reading from two files):
    Let's N be the number of records in calls file.
    Let's M be the number of records in texts file.
    To read N records from file and create the list of call will take O(N)
    To read M records from file and create the list of texts will take O(M)
    We do this operations one by one so the total complexity is
O(N+M)

SOLUTION complexity:
    Let's N be the number of elements in calls list.
    Going through all elements of calls list in the function count_unique_telephone_number() will take O(N).
        We can disregard everything in line#25 and line#26 because
        the length of telephone number is not larger than 20 chars which is not insignificant.
        The rest lines in the function takes constant time O(1).
        Total: O(N)
    Let's M be the number of elements in texts list.
        The same as for the calls list.
        Total: O(M)
    Total solution complexity is
O(N+M)

TOTAL complexity = PROVIDED CODE complexity + SOLUTION complexity
TOTAL complexity = O(N+M) + O(N+M) = 2*O(N+M). We can omit the coefficients
TOTAL = O(N+M)

#Task2------------------------
PROVIDED CODE complexity (reading from two files):
    Let's N be the number of records in calls file.
    Let's M be the number of records in texts file.
    To read N records from file and create the list of call will take O(N)
    To read M records from file and create the list of texts will take O(M)
    We do this operations one by one so the total complexity is
O(N+M)

SOLUTION complexity:
    Start analysis from function main().
    Let's N be the number of elements in a calls list.
        Call of the function create_telnumbers_dict_for_period() takes O(N) times because we are going through
        all elements in the list. We can disregard the time for calling the function get_date()
        in line#46 because it is not significant. Adding to the dictionary takes constant O(1) time.
        Total: O(N)
    Let's M be the number of elements in telnumbers_calltime_dict.
        Call of the function get_telnumber_with_max_calltime() takes O(M) where
        we go through all elements in the dictionary.
        Total: O(M)
    To print the result takes O(1) time.
    Since we performed these 2 functions one by one the total solution complexity is
 O(N+M)

TOTAL complexity = PROVIDED CODE complexity + SOLUTION complexity
TOTAL complexity = O(N+M) + O(N+M) = 2*O(N+M). We can omit the coefficients
TOTAL = O(N+M)

#Task3------------------------
PROVIDED CODE complexity (reading from two files):
    Let's N be the number of records in calls file.
    Let's M be the number of records in texts file.
    To read N records from file and create the list of call will take O(N)
    To read M records from file and create the list of texts will take O(M)
    We do this operations one by one so the total complexity is
O(N+M)

SOLUTION complexity:
    Start analysis from function main().
    Let's N be the number of elements in a calls list.
        It will take O(N) time to perform a code in a function create_bangalore_numbers_set() because we need to
        go through all elements. The rest lines in it take constant O(1) time or the time is insignificant.
        Total: O(N)
    Let's M be a number of elements in bangalore_codes_set.
        To perform the function print_answer_part_a() will take O(M*logM)
        because we are using built-in sorted() function before printing the result.
        Total: O(M*logM)
    To perform function print_answer_part_b() will take O(1) because we are doing simple
    math operations and just printing the result
    Since we performed operations one by one the we can sum up the total SOLUTION complexity:
O(N+M*logM)

TOTAL complexity = PROVIDED CODE complexity + SOLUTION complexity
TOTAL complexity = O(N+M) + O(N+M*logM) = O(2*N+M*logM).  We can omit the coefficients
TOTAL = O(N+M*logM)


