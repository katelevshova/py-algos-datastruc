########################################################################################
NOTE: I removed the analysis for provided code for reading data from two different files
########################################################################################

#Task0------------------------
SOLUTION complexity:
To get the value by index from a list takes 0(1)
To print the result message takes O(1)
ANSWER: O(1)

#Task1------------------------
SOLUTION complexity:
Let's N be the number of elements in calls list which is equal to the amount of records in a file calls.
Going through all elements of calls list in the function count_unique_telephone_number() will take O(N).
    We can disregard everything in line#37 and line#38 because
    the length of telephone number is not larger than 20 chars which is insignificant when
    we perform a search of digits.
    To add a number to the set takes O(1).
    Total: O(N)
We repeat the same for the text list which is also O(N)
Since we call count_unique_telephone_number() sequentially we can sum up the result.
O(N+N) = O(2N), we can omit any constants.
ANSWER: O(N)

#Task2------------------------
SOLUTION complexity:
We start analysis from function main().
Let's N be the number of elements in a calls list.
    Call of the function create_telnumbers_dict_for_period() takes O(N) times because we are going through
    all elements in the list. We can disregard the time for calling the function get_date()
    in line#46 because it takes insignificant time compared to N.
    Adding to the dictionary takes constant O(1) time.
    The call of function check_dictionary() takes O(1) since we accessing tha value by a unique key
    and perform a simple math operation.
    Total for create_telnumbers_dict_for_period: O(N)
Let's A be the number of elements in telnumbers_calltime_dict.
    Call of the function get_telnumber_with_max_calltime() takes O(A) where
    we go through all elements in the dictionary.
    Total for get_telnumber_with_max_calltime: O(A)
To print the result takes O(1) time.
Since we call create_telnumbers_dict_for_period() and get_telnumber_with_max_calltime() sequentially we can
sum up the result O(N+A). However N>A that's why we can omit A.
ANSWER: O(N)


#Task3------------------------
PROVIDED CODE complexity (reading from two files):
    Let's N be the number of records in calls file.
    Let's M be the number of records in texts file.
    To read N records from file and create the list of call will take O(N)
    To read M records from file and create the list of texts will take O(M)
    We do this operations one by one so the total complexity is
O(N+M)

SOLUTION complexity:
    Start analysis from function main().
    Let's N be the number of elements in a calls list (equal to the amount of records in a calls file).
        It will take O(N) time to perform a code in a function create_codes_dialed_by_bangalor_set() because we
        need to go through all elements. The rest lines in it take constant O(1) time or the time is insignificant.
        Total: O(N)
    Let's A be a number of elements in bangalore_codes_set.
        To perform the function print_answer_part_a() will take O(A*logA)
        because we are using built-in sorted() function before printing the result.
        Total: O(A*logA)
    To perform function print_answer_part_b() will take O(1) because we are doing simple
    math operations and just printing the result
    Since we performed operations one by one the we can sum up the total SOLUTION complexity:
O(N+A*logA)

TOTAL complexity = PROVIDED CODE complexity + SOLUTION complexity
TOTAL complexity = O(N+M) + O(N+A*logA) = O(2*N+M+A*logA). We can omit the coefficients
TOTAL = O(N+M+A*logA)

#Task4------------------------
PROVIDED CODE complexity (reading from two files):
    Let's N be the number of records in calls file.
    Let's M be the number of records in texts file.
    To read N records from file and create the list of call will take O(N)
    To read M records from file and create the list of texts will take O(M)
    We do this operations one by one so the total complexity is
O(N+M)

SOLUTION complexity:
    Start analysis from function main().
    create_telemarketers_set() function is consists of 2 sequential calls:
        function check_calls_data()
        Let's N be the number of elements in calls list (equal to number of records in the calls file).
            It will take O(N) time to go through all elements in a list.
            The rest operations will take insignificant amount of time or O(1).
        O(N)
        function check_texts_data()
        Let's M be the number of elements in texts list (equal to number of records in the texts file).
            The same here.
        O(M)
    Total O(N+M)
    Let's A be a number of elements in possible_telemarketers_set.
        The function print_sorted_telemarketers_new_line() will take O(A*logA)
        because we are using built-in sorted() function before printing the result.
    Total: O(A*logA)
O(N+M+A*logA)

TOTAL complexity = PROVIDED CODE complexity + SOLUTION complexity
TOTAL complexity = O(N+M) + O(N+M+A*logA) = O(2N+2M+A*logA). We can omit the coefficients
TOTAL = O(N+M+A*logA)
