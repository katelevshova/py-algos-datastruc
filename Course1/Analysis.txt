#Task0------------------------
Let's N be the number of records in calls file.
Let's M be the number of records in texts file.
To read N records from file and create the list of call will take O(N)
To read M records from file and create the list of texts will take O(M)
We do this operations one by one so the total complexity is O(N+M)
To print the result message takes O(1) time.
ANSWER: O(N+M)

#Task1------------------------
Let's N be the number of records in a file.
    Going through all records of 1 file in the function count_unique_telephone_number() will take O(N).
    We can disregard everything in line#25 and line#26 because
    the length of telephone number is not larger than 20 chars which is not insignificant.
    The rest lines in the function takes constant time O(1).
We call the function count_unique_telephone_number() two times for each file which can be counted as O(2N)
however we can disregard all coefficients which leaves us with the result runtime complexity O(N).
ANSWER: O(N)

#Task2------------------------
Start analysis from function main().
Let's N be the number of records in a file.
    Call of the function create_telnumbers_dict_for_period() takes O(N) times because we are going through
    all records in the file. We can disregard the time for calling the function get_date() in line#46 because it is not
    significant. Adding to the dictionary takes constant O(1) time.
Let's M be the number of elements in telnumbers_calltime_dict.
    Call of the function get_telnumber_with_max_calltime() takes O(M) where
    we go through all elements in the dictionary. So the total can be counted as O(N+M).
    However the number of elements in the dictionary (M) is smaller than the number of all records (N)
    and in most cases it would be insignificant compared to the N and the complexity will be O(N) in most cases.
    In worst case scenario it will be O(N+M)
To print the result takes O(1) time.
ANSWER: O(N+M)

#Task3------------------------
Start analysis from function main().
Let's N be the number of records in a file.
    It will take O(N) time to perform a code in a function create_bangalore_numbers_set() because we need to
    go through all records in the file. The rest lines in it take constant O(1) time or the time is insignificant.
Let's M be a number of elements in bangalore_codes_set.
    To perform the function print_answer_part_a() will take O(M*logM)
    because we are using built-in sorted() function before printing the result.
    The amount of M is much smaller than N because it contains only unique bangalore area codes.
    Thus at this moment it doesn't take much time to perform.
    However in worst case scenario if all records would contain unique area codes we will have the same large amount
    of elements in the bangalore_codes_set (this won't happen often). Which would give us O(N+M*logM)
O(N+M*logM)
To perform funciton print_answer_part_b() will take O(1) because we are doing simple math operations and just printing
the result
ANSWER: O(N+M*logM)

