########################################################################################################################
Analysis. Project "Problems vs. Algorithms"
########################################################################################################################

------------------------------------------------------------------------------------------------------------------------
#Problem1

    In the function sqrt_slower() loop starts when x=2 and ends when x*x=N.
    Or, in other words, it stops when x = square root of N.
    The runtime is significantly slower than implementation of sqrt() function by Newton's method
    which takes O(logN) as it was expected in the task. Here we divide N by 2 until we reach square root of N
    skipping several steps. Space is O(1).

------------------------------------------------------------------------------------------------------------------------
#Problem2

    We are using a binary search to implement this task which takes O(logN) time.
    We divide the array on 2 parts recursively to determine which side is normally ordered,
    then use the normally ordered half to figure out which side to search to find the target.
    Since this is a recursive version of binary search, the space complexity of algorithm is O(logN), because
    we make logN recursive calls to function, each of which requires O(1) space.

------------------------------------------------------------------------------------------------------------------------
#Problem3

    To implement the task first I need to sort the array and then create a pair of numbers to return as a result.

    In function sort_list_slower() I'm using QuickSort algorithm to sort the input array.
        QuickSort is a Divide and Conquer algorithm. It picks an element as pivot and partitions the given array
        around the picked pivot.
        QuickSort is very popular because it's average time complexity is much quicker. With a good pivot the QuickSort
        would partition the array into halves which grows logarithmically with N. The average time is O(NlogN).
        When the smallest of largest element is selected as the pivot it would lead to a worst case
        time complexity of O(N^2).
    In function sort_list() I'm using HeapSort algorithm which guarantee to take O(NlogN) which is better than the
        worst case of QuickSort.
    The overall time complexity of rearrange_digits() function is O(NlogN) with HeapSort.
    Space is O(1) because the heap is built inside the array to be sorted.

------------------------------------------------------------------------------------------------------------------------
#Problem4

    Only one traversal of N elements takes O(N) time. Space is O(1).

    At first, the full array is unknown. There are three indices â€“ low, mid and high.
    low_index - is a counter of zeroes in the input_list which counts from the beginning of the list,
                the zeroes will be in range input_list[0:low_index] or starting from 0 and ending at low_index-1
    mid_index - is a counter of ones in input_list which counts from the beginning of the list,
                the ones will be in range input_list[low_index:mid_index] or starting from low_index to mid_index-1
    Since we don't know the range between ones and 2s we count high_index from the end of the input_list.
    high_index - is a counter for 2s in the input_list from the end, we continue until high_index meets the mid_index

    In a swap_numbers() function I swap elements only if they are different as an optimization.

------------------------------------------------------------------------------------------------------------------------
#Problem5

    To insert a word into a Trie takes O(N) where N is the number of characters in the word.
    If M is the number of words than to build a Trie giving a list of words takes O(M*N) since we are going
    through all characters of each word.
    To find a prefix node in the Trie by giving a prefix takes O(N) where N is the number of characters in the prefix.
        Getting a value from a dictionary by a key takes O(1).

    When insert ant search takes O(N) time, the space complexity is
    O(ALPHABET_SIZE * key_length * N) where N is number of keys in Trie.

    To get all suffixes of the prefix node we need recursively go through all items of the prefix node dictionary
    until the last node. This will take O(N^M) where N is the number of branches and M the depth.
    Space complexity is O(N) since only one level exists at a single time.

------------------------------------------------------------------------------------------------------------------------
#Problem6

    Function get_min_max() takes O(N) linear time in a single traversal.
    The length of the input list must be at least 2.
    We initialize the min_value and max_value using first 2 elements.
    Start traversing the input list from the 3rd element, compare each element with min_value
    and max_value accordingly. The worst case occurs when elements are sorted in descending order.
    Space complexity is O(1).

------------------------------------------------------------------------------------------------------------------------
#Problem7

    We start from creating the Router instance. The first node is going to be a Root node.
    Method add_handler() first takes a path and converts it to a single format for a root node which takes O(1).
        Then we split the path using "/" separator which takes O(N), N - the length of the path string.
        Using the result we insert all directories from the list into the RouteTrie which takes O(N) time and
        space O(M*N), where M - the length of the directories list, N - the number of keys in Trie.

    Method lookup() also takes a path and converts it to a single format for a root node and splits it by "/".
        After that method find() takes the resulted directories list and searches for the directory name in the list
        and returns its handler value. In overall it takes O(N) time and O(N) space.



